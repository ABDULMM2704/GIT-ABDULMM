/*---------------------------------------------------------DML AFTER TRIGGERS--------------------------------------------------*/


/*

TRIGGERS DML

AFTER TRIGGER: 
              AN AFTER TRIGGER EXECUTES FOLLOWING THE TRIGGERING ACTION, SUCH AS AN INSERT, UPDATE OR DELETE


DDL TRIGGERS:

THIS TYPE OF TRIGGER IS FIRED AGAINST DDL STATEMENTS LIKE DROP TABLE, CREATE TABLE OR ALTER TABLE. DDL TRIGGERS ARE ALWAYS AFTER TRIGGERS.
 
LOGON TRIGGERS:
 
THIS TYPE OF TRIGGER IS FIRED AGAINST A LOGON EVENT BEFORE A USER SESSION IS ESTABLISHED TO THE SQL SERVER. */


CREATE TABLE [DBO].[EMPLOYEE_TEST] 
(  
EMP_ID INT IDENTITY,  
EMP_NAME VARCHAR(100),  
EMP_SAL DECIMAL (10,2)  
) 

-- DROP TABLE EMPLOYEE_TEST

-- TRUNCATE TABLE EMPLOYEE_TEST

INSERT INTO EMPLOYEE_TEST VALUES ('ANEES',1000);  
INSERT INTO EMPLOYEE_TEST VALUES ('RICK',1200);  
INSERT INTO EMPLOYEE_TEST VALUES ('JOHN',1100);  
INSERT INTO EMPLOYEE_TEST VALUES ('STEPHEN',1300);  
INSERT INTO EMPLOYEE_TEST VALUES ('MARIA',1400); 

CREATE TABLE [DBO].[EMPLOYEE_TEST_AUDIT]  
(  
EMP_ID INT,  
EMP_NAME VARCHAR(100),  
EMP_SAL DECIMAL (10,2),  
AUDIT_ACTION VARCHAR(100),  
AUDIT_TIMESTAMP DATETIME  
)

-- DROP TABLE EMPLOYEE_TEST_AUDIT

-- TRUNCATE TABLE EMPLOYEE_TEST_AUDIT

--METHOD 1

CREATE TRIGGER TRG_AFTER_INSERT ON DBO.EMPLOYEE_TEST
FOR INSERT 
AS

DECLARE @Emp_ID int;  
DECLARE @Emp_name varchar(100); 
DECLARE @Emp_Sal decimal (10,2);
DECLARE @Audit_Action varchar(100);

SELECT @EMP_ID = I.EMP_ID FROM INSERTED I;
SELECT @EMP_NAME = I.EMP_NAME FROM INSERTED I;
SELECT @EMP_SAL = I.EMP_SAL FROM INSERTED I;

SET @AUDIT_ACTION = 'INSERTED RECORD -- AFTER INSERT TRIGGER';

INSERT INTO EMPLOYEE_TEST_AUDIT (EMP_ID,EMP_NAME,EMP_SAL,AUDIT_ACTION,AUDIT_TIMESTAMP) VALUES (@EMP_ID,@EMP_NAME,@EMP_SAL,@AUDIT_ACTION,GETDATE());

PRINT 'AFTER INSERT TRIGGER FIRED'
GO

-- DROP TRIGGER TRGAFTERINSERT 

INSERT INTO EMPLOYEE_TEST VALUES ('AHMED',10000)

-- METHOD 2

CREATE TRIGGER TRG_AFTER_INSERT ON DBO.EMPLOYEE_TEST
FOR INSERT 
AS
INSERT INTO EMPLOYEE_TEST_AUDIT
(
EMP_ID,
EMP_NAME,
EMP_SAL,
AUDIT_ACTION,
AUDIT_TIMESTAMP)

SELECT
I.EMP_ID,
I.EMP_NAME,
I.EMP_SAL,
'AFTER TRIGGER' AS AUDIT_ACTION,
GETDATE() AS AUDIT_TIMESTAMP
FROM  INSERTED I 

PRINT 'AFTER INSERT TRIGGER FIRED'
GO

INSERT INTO EMPLOYEE_TEST VALUES ('ABDULMUSHTAQAHMED',123456)

-- DROP TRIGGER TRIAFTERINSERT


--AFTER UPDATE TRIGGER 

CREATE TRIGGER TRG_AFTER_UPDATE ON [DBO].[EMPLOYEE_TEST]
FOR UPDATE 
AS

DECLARE @Emp_ID int;  
DECLARE @Emp_name varchar(100); 
DECLARE @Emp_Sal decimal (10,2);
DECLARE @Audit_Action varchar(100);

SELECT @EMP_ID = I.EMP_ID FROM INSERTED I;
SELECT @EMP_NAME = I.EMP_NAME FROM INSERTED I;
SELECT @EMP_SAL = I.EMP_SAL FROM INSERTED I;

IF UPDATE(EMP_SAL)
BEGIN
SET @Audit_Action = 'UPDATED EMP_SAL'
END

IF UPDATE(EMP_NAME)
BEGIN
SET @Audit_Action = 'UPDATED EMP_NAME'
END

INSERT INTO EMPLOYEE_TEST_AUDIT
(
EMP_ID,
EMP_NAME,
EMP_SAL,
AUDIT_ACTION,
AUDIT_TIMESTAMP)

SELECT
I.EMP_ID,
I.EMP_NAME,
I.EMP_SAL,
@Audit_Action AS AUDIT_ACTION,
GETDATE() AS AUDIT_TIMESTAMP
FROM  INSERTED I 

PRINT 'AFTER UPDATE TRIGGER FIRED'
GO


UPDATE A

SET A.EMP_NAME = 'IAMAHMED2704',A.EMP_SAL=60000
FROM [DBO].[EMPLOYEE_TEST] A
WHERE A.EMP_ID=4


-- DROP TRIGGER TRG_AFTER_UPDATE


-- AFTER DELETE TRIGGER 


CREATE TRIGGER TRG_AFTER_DELETE ON DBO.EMPLOYEE_TEST
FOR DELETE 
AS
INSERT INTO EMPLOYEE_TEST_AUDIT
(
EMP_ID,
EMP_NAME,
EMP_SAL,
AUDIT_ACTION,
AUDIT_TIMESTAMP)

SELECT
I.EMP_ID,
I.EMP_NAME,
I.EMP_SAL,
'AFTER DELETE' AS AUDIT_ACTION,
GETDATE() AS AUDIT_TIMESTAMP
FROM  DELETED I 

PRINT 'AFTER DELETE TRIGGER FIRED'
GO


DELETE FROM EMPLOYEE_TEST WHERE EMP_ID=2

-- DROP TRIGGER TRG_AFTER_DELETE


/*---------------------------------------------------------INSTEAD OF TRIGGERS--------------------------------------------------*/

--TRIGGERS DML

/*INSTEAD OF TRIGGER:
			       AN INSTEAD OF TRIGGER IS FIRED INSTEAD OF THE TRIGGERING ACTION SUCH AS AN INSERT, UPDATE, OR DELETE */

-- INSTEAD OF INSERT

CREATE TRIGGER TRG_INSTEAD_OF_INSERT ON [DBO].[EMPLOYEE_TEST]
INSTEAD OF INSERT 
AS
BEGIN 

INSERT INTO [DBO].[EMPLOYEE_TEST_AUDIT] ( 
EMP_ID,
EMP_NAME,
EMP_SAL,
AUDIT_ACTION,
AUDIT_TIMESTAMP )

SELECT 
I.EMP_ID,
I.EMP_NAME,
I.EMP_SAL,
'INSTEAD OF INSERT' AS AUDIT_ACTION,
GETDATE() AS AUDIT_TIMESTAMP
FROM INSERTED I WHERE EMP_SAL <=10000

INSERT INTO [DBO].[EMPLOYEE_TEST](
EMP_NAME,
EMP_SAL )

SELECT 
I.EMP_NAME,
I.EMP_SAL FROM INSERTED I WHERE EMP_SAL >10000

END
GO

--SET IDENTITY_INSERT EMPLOYEE_TEST ON

INSERT INTO EMPLOYEE_TEST VALUES ('ABDUL',15000)


--SET IDENTITY_INSERT EMPLOYEE_TEST OFF


-- DROP TRIGGER TRG_INSTEAD_OF_INSERT


-- INSTEAD OF DELETE USING MERGE 

CREATE TRIGGER TRG_INSTEAD_OF_DELETE ON [DBO].[EMPLOYEE_TEST]
INSTEAD OF DELETE
AS
MERGE [DBO].[EMPLOYEE_TEST_AUDIT] AS A
USING (SELECT * FROM DELETED) AS B
ON A.EMP_ID=B.EMP_ID
WHEN MATCHED THEN DELETE;
GO

DELETE FROM [DBO].[EMPLOYEE_TEST] WHERE EMP_ID=4

-- DROP TRIGGER TRG_INSTEAD_OF_DELETE


-- INSTEAD OF UPDATE TRIGGER

CREATE TRIGGER TRG_INSTEAD_OF_UPDATE ON [DBO].[EMPLOYEE_TEST]
INSTEAD OF UPDATE
AS 

DECLARE @AUDIT_ACTION VARCHAR(50)

IF UPDATE(EMP_NAME)
BEGIN 
SET @AUDIT_ACTION = 'UPDATED EMP_NAME'
END

IF UPDATE(EMP_SAL)
BEGIN 
SET @AUDIT_ACTION = 'UPDATED EMP_SAL'
END

INSERT INTO [DBO].[EMPLOYEE_TEST_AUDIT] ( 
EMP_ID,
EMP_NAME,
EMP_SAL,
AUDIT_ACTION,
AUDIT_TIMESTAMP )

SELECT
I.EMP_ID,
I.EMP_NAME,
I.EMP_SAL,
@AUDIT_ACTION AS AUDIT_ACTION,
GETDATE() AS AUDIT_TIMESTAMP
FROM INSERTED I
GO


UPDATE  A
SET A.EMP_SAL = 1234
FROM [DBO].[EMPLOYEE_TEST] A
WHERE A.EMP_ID=4

-- DROP TRIGGER TRG_INSTEAD_OF_UPDATE


/*---------------------------------------------------------DDL AFTER TRIGGERS--------------------------------------------------*/

--SQL SERVER DDL TRIGGERS RESPOND TO SERVER OR DATABASE EVENTS RATHER THAN TO TABLE DATA MODIFICATIONS.


CREATE TABLE ALTER_LOG (

ID INT IDENTITY,
EVENT_DATA XML NOT NULL,
CHANGED_BY SYSNAME NOT NULL );


--DROP TABLE ALTER_LOG

CREATE TRIGGER TRG_ALTER_TABLE
ON DATABASE
FOR
CREATE_TABLE,ALTER_TABLE,DROP_TABLE AS 
BEGIN 
SET NOCOUNT ON

INSERT INTO ALTER_LOG (EVENT_DATA,CHANGED_BY)
VALUES (EVENTDATA(),USER) END  

--DROP TRIGGER TRG_ALTER_TABLE